<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux线上环境搭建]]></title>
    <url>%2F2019%2F03%2F05%2FJavaLearning%2FServerSetting%2F</url>
    <content type="text"><![CDATA[服务器环境搭建 Java安装 到官网下载jdk. 解压到tar -zxvf jdk_8u_201 -C /usr/java 编辑环境变量vim /etc/profile,使环境变量生效source /etc/profile export CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport PATH=$PATH:$GIT_HOME/bin:$MAVEN_HOME/bin:$JAVA_HOME/bin:$JRE_HOME/bin: 检查是否安装成功:java -version Mysql安装1T/e&gt;dle=reo 到官网Yum仓库下载rpm包. rpm -ivh &lt;文件名&gt;或者yum localinstall &lt;文件名&gt;安装刚才下载好的包 此时便可以通过yum安装最新的mysql.使用指令yum install mysql-community-server安装 配置 启动mysql:service mysqld start 关闭mysql:service mysqld stop 查看mysql提供的初始root密码:cat /var/log/mysqld.log | grep password 登录mysql,若出现提示Access denied for user &#39;root&#39;@&#39;localhost&#39;,可能是密码错了.否则百度 修改root密码:ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;vnaso943983&#39;; 如果不想使用强密码,需要先降低密码策略等级: SET GLOBAL validate_password.policy=0; 创建用户CREATE USER &#39;vnaso&#39;@&#39;%&#39; IDENTIFIED BY &#39;vnaso222&#39;;,并授权:GRANT ALL ON *.* TO &#39;vnaso&#39;@&#39;%&#39; WITH GRANT OPTION; 修改默认字符集.打开/etc/my.cnf,添加如下配置 # 对本地的mysql客户端的配置[client]default-character-set = utf8mb4# 对其他远程连接的mysql客户端的配置[mysql]default-character-set = utf8mb4# 本地mysql服务的配置[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ci 查看字符集:SHOW VARIABLES WHERE Variable_name LIKE &#39;character\_set\_%&#39; OR Variable_name LIKE &#39;collation%&#39;; 查看时区:show variables like &#39;%zone%&#39;; 修改时区为UTC:set time_zone = &#39;utc&#39;;flush privileges;修改时区并刷新. 如果报错Unknown or incorrect time zone: &#39;UTC&#39;,在shell执行:mysql_tzinfo_to_sql /usr/share/zoneinfo |mysql -u root mysql -p,有warning提示Unable to load xxx是正常的. 如果修改了之后,再次查询还是System,修改配置文件/etc/my.cnf,在[mysqld]下添加default-time-zone = UTC Git安装 到官网获取下载链接.wget &lt;url&gt;下载 使用tar -zxvf &lt;文件名&gt;解压缩. 安装git前置依赖:yum -y install zlib-devel openssl-devel cpio expat-devel gettext-devel curl-devel perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker 进入git安装目录下,进行安装:./configure --prefix=/usr/local/git-&gt;make &amp;&amp; make install 如果报错no such file or directory.使用:yum install autoconf然后在目录中键入autoconf,再次进行安装即可. 添加环境变量.vim /etc/profile,使环境变量生效source /etc/profile 检查是否安装成功git --version 配置 生成私钥:ssh-keygen -t rsa -C &quot;XXX@outlook.com&quot;密钥名称可自定义 告知系统来管理生成的密钥:ssh-add ~/.ssh/id_rsa 如果报错could not open a connection to your authentication agent 执行命令:eval ssh-agent(是~,而不是单引号).然后再执行:ssh-add ~/.ssh/id_rsa 在远程服务器中添加公钥:cat ~/.ssh/id_rsa.pub Nginx安装 到官网下载压缩包,解压. 安装nginx编译文件及库文件yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel pcre pcre-devel 进入解压后的目录进行安装:./configure --prefix=/usr/local/nginx-&gt;make &amp;&amp; make install 测试:/usr/local/sbin/nginx -t 配置参考Nginx配置文件说明 Tomcat安装 到官网下载压缩包,解压.一般选择core就行 防火墙打开8080端口,启动tomcat:$CATALINA_HOME/bin/startup.sh 测试:访问&lt;服务器地址&gt;:8080 配置 修改默认编码.vim /opt/Develop/apache-tomcat-9.0.16/conf/server.xml.搜索8080,在&lt;Connector&gt;节点中添加URIEncoding=&quot;UTF-8&quot; 编辑环境变量.vim /etc/profile,添加export CATALINA_HOME = /opt/apache-tomcat-9.0.1.然后source /etc/profile使配置生效 Maven安装 到官网下载压缩包,解压. 添加环境变量:vim /etc/profile,添加export $MAVEN_HOME=....并将$MAVEN_HOME/bin添加到$PATH中 source /etc/profile使配置生效 测试:mvn -v Vstpd安装 下载安装:yum install vstpd 创建接收上传文件的文件夹:mkdir /ftpfile 创建只有上传权限不能登录的用户:useradd ftpuser -d /ftpfile/ -s /sbin/nologin 给创建的ftpuser此用户赋予/ftpfile的权限:chown -R ftpuser.ftpuser /ftpfile/.此时用户名和用户组都是ftpuser 给ftpuser设置密码:passwd ftpuser 编辑配置文件,让上传目录指向之前创建的目录:vim /etc/vsftpd/vsftpd.conf 搜索banner节点,此处配置ftp的欢迎信息.ftpd_banner=xxxxx 可以选择添加use_localtime=yes表示使用服务器时间 添加anonymous_enable=NO关闭匿名用户访问 配置FTP被动模式的端口 pasv_min_port=30000pasv_max_port=30000 ftp配置 # 修改为NO，关闭匿名用户访问anonymous_enable=NO# 将所有本地用户限制在自家目录中。chroot_local_user=YES # 设置系统用户FTP主目录local_root=/data# 开启charoot写权限allow_writeable_chroot=YES#配置可以登录ftp的用户目录userlist_deny=NOuserlist_file=/etc/vsftpd/user_list#配置ftp用户访问目录配置目录user_config_dir=/etc/vsftpd/userconfig# 配置FTP被动模式的端口pasv_min_port=30000pasv_max_port=30000 配置ftp用户登录后访问的目录 在/etc/vsftpd目录下新建userconfig目录 在目录下配置用户的登录目录,文件名即对应的用户名 vim /etc/vsftpd/userconfig/ftpuser 在创建的文件中添加local_root=/ftpfile/ftpuser /ftpfile表示对应用户登录ftp时的根目录 注意:路径前不能有空格,否则不识别!!!!会报错unrecognised variable in config file: local_root 重启vsftpd 启动:systemctl start vsftpd.service(service vsftpd start) 停止:systemctl stop vsftpd.service(service vsftpd stop) 重启:systemctl restart vsftpd.service(service vsftpd restart) 打开防火墙,添加21端口和30000端口. 添加端口:firewall-cmd --add-port=21/tcp --permanent,firewall-cmd --add-port=21/tcp --permanent 重启防火墙:firewall-cmd --reload 测试.浏览器打开ftp://服务器地址登录.如果只能下载不能上传,请查阅开启关闭SELinux相关信息 swap交换缓存创建 创建swap文件:sudo fallocate -l 4G /swapfile(在/下创建一个大小为4G的文件swapfile) 授权swap文件:chmod 600 /swapfile(该文件的读写只能root操作) 告知系统将文件用于swap:mkswap /swapfile 启用swap文件:swapon /swapfile 确认:free 至此已经在系统中启用了swap交换缓存,但是一旦系统重启后,服务器还不能自动启用该文件. 使swap永久生效 打开文件nano /etc/fstab,在文件末尾添加/swapfile swap swap sw 0 0 ^X表示Ctrl + X,按下选择yes保存退出. 环境变量配置在腾讯云服务器中的配置 export CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport PATH=$PATH:$GIT_HOME/bin:$MAVEN_HOME/bin:$JAVA_HOME/bin:$JRE_HOME/bin:export GIT_HOME=/usr/local/gitexport MAVEN_HOME=/opt/Develop/apache-maven-3.6.0export JAVA_HOME=/usr/java/jdk1.8.0_201export JRE_HOME=/usr/java/jdk1.8.0_201/jreexport CATALINA_HOME=/opt/Develop/apache-tomcat-9.0.16]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记]]></title>
    <url>%2F2019%2F03%2F04%2FJavaLearning%2FLinux%2F</url>
    <content type="text"><![CDATA[Linux学习笔记系统命令tar解压解压到指定目录:tar -zxvf &lt;要解压的文件&gt; -C &lt;目的路径&gt; tar 命令参数 -x或–extract或–get:从备份文件中还原文件 -Z或–compress或–uncompress:通过compress指令处理备份文件 -f&lt;备份文件&gt;或–file=&lt;备份文件&gt;:指定备份文件 -v:显示操作过程 -C &lt;目录&gt;:这个选项用在解压缩,若要在特定目录解压缩,可以使用这个选项 防火墙(使用firewalld)开启关闭重启:service firewalld start/stop/restart 查看运行状态:service firewalld status/sudo firewall-cmd --state 查看防火墙开放的端口:sudo firewall-cmd --list-ports 删除端口:firewall-cmd --zone=&lt;分区名&gt; --remove-port=&lt;端口号&gt;/&lt;通讯协议&gt; --permanent 为防火墙添加端口:sudo firewall-cmd --zone=&lt;分区名&gt; --add-port=&lt;端口号&gt;/&lt;通讯协议&gt; --permanent(永久生效) 防火墙分为多个区域,可用sudo firewall-cmd --get-zones查看,默认是public 软件安装查看软件是否安装rom -qa | grep &lt;软件名&gt; 下载安装软件yum install &lt;软件名1,2,3...&gt;/yum -y install &lt;软件名1,2,3...&gt; 安装rpm软件包:rpm -ivh &lt;软件包名&gt; rpm 命令参数 -i:安装过程中显示正在安装的文件信息 -h:安装过程中显示安装进度 服务进程查看服务进程:ps -ef| grep &lt;进程名&gt; 修改权限为文件添加可执行权限:chmod +x file.name,可以用通配符*.后缀名 查看文件查看文件最后n行:tail -n &lt;行数&gt; &lt;文件名&gt; 动态查看文件最后n行:tail -n &lt;行数&gt; -f &lt;文件名&gt;,使用ctrl+c来结束 创建文件创建指定大小文件:fallocate -l &lt;文件大小&gt; &lt;文件名&gt; 例:sudo fallocate -l 4G /swapfile(在/下创建一个大小为4G的文件swapfile) 查看系统状态查看内存使用情况:free free 命令参数 -m:以MB为单位显示.默认单位为KB.向下取整 用户操作创建用户:useradd 用户名或adduser 用户名.后者创建的用户会自动创建主目录,系统shell版本和创建时输入密码,而前者没有. 修改用户密码:passwd 用户名 删除用户:userdel 用户名 vim 搜索 在normal模式下按下/即可进入查找模式,输入要查找的字符串并按下回车.Vim会跳转到第一个匹配.按下n查找下一个,按下N查找上一个. 注意查找回车应当用\n,替换回车应当用\r vim默认采用大小写敏感.在查找模式中加入\c表示大小写不敏感,\C敏感.]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx学习笔记]]></title>
    <url>%2F2019%2F03%2F04%2FJavaLearning%2FNginx%2F</url>
    <content type="text"><![CDATA[Nginx使用Nginx配置 在···/nginx/conf目录下的nginx.conf # 全局块... # events块events &#123; ...&#125;# http块http &#123; # http全局块 ... # 虚拟主机server块 server &#123; # server全局块 ... # location块 location [PATTERN] &#123; ... &#125; location [PATTERN] &#123; ... &#125; &#125; server &#123; ... &#125; # http全局块 ... &#125; 全局块 配置影响nginx全局的指令.一般有运行nginx服务器的用户组,nginx进程pid存放路径,日志存放路径,配置文件引入,允许生成worker process数等. ########### 每个指令必须有分号结束。##################user administrator administrators; #配置用户或者组，默认为nobody nobody。#worker_processes 2; #允许生成的进程数，默认为1#pid /nginx/pid/nginx.pid; #指定nginx进程运行文件存放地址error_log log/error.log debug; #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg events块 配置影响nginx服务器或与用户的网络连接.有每个进程的最大连接数,选取哪种事件驱动模型处理连接请求,是否允许同时接受多个网路连接,开启多个网络连接序列化等. events &#123; accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off #use epoll; #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport worker_connections 1024; #每个worker process最大连接数&#125; http块 可以嵌套多个server,配置代理,缓存,日志定义等绝大多数功能和第三方模块的配置.如文件引入,mime-type定义,日志自定义,是否使用sendfile传输文件,连接超时时间,单连接请求数等. http &#123; include mime.types; #文件扩展名与文件类型映射表 default_type application/octet-stream; #默认文件类型，默认为text/plain #access_log off; #取消服务日志 log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式 access_log log/access.log myFormat; #combined为日志格式的默认值 sendfile on; #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。 sendfile_max_chunk 100k; #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。 keepalive_timeout 65; #连接超时时间，默认为75s，可以在http，server，location块。 # 定义常量 # 负载均衡,按权重或规则将请求转发到某个服务器 upstream mysvr &#123; server 127.0.0.1:7878; server 192.168.10.121:3333 backup; #热备 &#125; error_page 404 https://www.baidu.com; #请求失败时跳转的错误页 server块 配置虚拟主机的相关参数,一个http中可以有多个server. 并且可以过滤有人恶意将某些域名指向自己的主机服务器. #定义某个负载均衡服务器 server &#123; keepalive_requests 120; #单连接请求上限次数。 listen 4545; #监听端口 server_name 127.0.0.1; #监听地址 &#125; server_name server_name是监听你的HTTP请求头中的host. 默认情况下，Nginx 允许直接以 IP 的方式就能直接访问到网站，或者通过未设置的域名访问(比如有人把他自己的域名指向了你的服务器 IP),可通过如下设置进行防护 例如: &gt; server &#123;&gt; listen 80 default_server;&gt; server_name _;&gt; return 444; # 过滤其他域名的请求，返回444状态码&gt; &#125;&gt; server &#123;&gt; listen 80;&gt; server_name www.aaa.com; # www.aaa.com域名&gt; location / &#123;&gt; proxy_pass http://localhost:8080; # 对应端口号8080&gt; &#125;&gt; &#125;&gt; server &#123;&gt; listen 80;&gt; server_name www.bbb.com; # www.bbb.com域名&gt; location / &#123;&gt; proxy_pass http://localhost:8081; # 对应端口号8081&gt; &#125;&gt; &#125;&gt; server_name的值为www.aaa.com.在浏览器中输入www.aaa.com,那么匹配到了对应server_name,请求就会被转发到http://localhost:8080.这里www.aaa.com和www.bbb.com都绑定到了服务器 而对于未绑定的域名指向服务器时,匹配不到配置的虚拟主机域名,就会使用默认的虚拟主机,然会返回444. listen 80 default_server:指定该server配置段为80端口的默认主机，即对于未绑定的域名指向你的服务器时,匹配不到你配置的虚拟主机域名后,会默认使用这个虚拟主机 server_name _:此处的_可以换成任意其他无效字符或无效的域名,表示该server配置不会被正常访问到 access_log:日志 格式:access_log logs/aaa.access.log main-日志类型 日志存放路径 日志格式 location块详细参考-知否 详细参考-本地 配置请求的路由,以及各种页面的处理情况 location ~*^.+$ &#123; #请求的url过滤,正则匹配 #root path; #根目录 #index vv.txt; #设置默认页 proxy_pass http://mysvr; #请求转向mysvr 定义的服务器列表 deny 127.0.0.1; #拒绝的ip allow 172.18.5.54; #允许的ip &#125; 通配符 =表示精确匹配.只有请求的url路径与后面的字符串完全相等时,才会命中 ~表示该规则是使用正则定义的,区分大小写 ~*表示该规则是使用正则定义的,不区分大小写 ^~表示如果该符号后面的字符是最佳匹配,采用该规则,不再进行后续的查找 属性解释 root表示url匹配上了此location定义的正则后,就将这个url映射到定义的根目录. 例如 location /user/img,root /usr/local/resource;. 那么如果请求为http://www.aaa.com/user/img/aaa.jpg,/user/img对应/usr/local/resource.该请求得到的结果就是/usr/local/resource下的aaa.jpg index就是设置默认的欢迎页面.页面需要存在于定义的root目录下. 接上例index index.html;. 那么如果请求为http://www.aaa.com/user/img/,请求的结果就是/usr/local/resource/user/img下的index.html,有点类似于相对路径.而如果要让index.html为/usr/local/resource/路径下的index.html的话,需要把root换为alias,具体参照root和alias的区别. Linux下命令 在···/nginx/sbin/目录下 启动nginx:nginx -s start 停止nginx:nginx -s stop 重启nginx:nginx -s reload 测试配置:nginx -t Nginx日志目录 在···/nginx/logs/目录下 目录下通常存放有access.log,error.log以及nginx.pid. nginx.pid中保存着nginx的进程号,可以通过查看此文件获取进程号来kill nginx. root和alias的区别root 示例1location / &#123; root /data/www/; index index.html;&#125; 请求http://example.com这个地址,那么在服务器中真实对应的地址为/data/www/index.html 请求 真实地址 http://example.com /data/www/index.html http://example.com/a.png /data/www/a.png root 示例2location /aaa/ &#123; root /data/www/; index index.html;&#125; 请求 真实地址 http://example.com/aaa/ /data/www/aaa/indexhtml http://example.com/aaa/a.gif /data/www/aaa/a.gif alias 示例1location /&#123; alias /data/www/; index index.html;&#125; 请求 真实地址 http://example.com /data/www/index.html http://example.com/b.jpg /data/www/a.jpg alias 示例2location /bbb/&#123; alias /data/www/; index index.html;&#125; 请求 真实地址 http://example.com/bbb/ /data/www/index.html http://example.com/bbb/b.jpg /data/www/b.jpg 对比上面4个示例可以发现,使用root的真实地址是root+location+(文件名),而使用alias的真实地址是alias+(文件名). 注意 alias只能作用在location中,而root可以存在server,http,location. alias后面必须要用/结束.]]></content>
      <categories>
        <category>Tool</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Logback学习笔记]]></title>
    <url>%2F2019%2F02%2F15%2FJavaLearning%2Flogback%2F</url>
    <content type="text"><![CDATA[Logback使用标签属性介绍根标签 - configuration属性 scan:布尔值.表示是否自动扫描logback.xml的文本变化. scanPeriod:字符串.表示每间隔多长时间对logback.xml进行扫描.格式:数字 + 时间单位(如:seconds,minutes) debug:布尔值.表示是否打印logback内部的日志信息. 常用配置为:&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;&lt;/configuration&gt; 表示自动每60秒扫描一次logback.xml的配置有无变化,如果有就更新,且不打印logback的内部日志.这样可以热更新logback配置文件 子标签 &lt;property&gt;:定义参数常量 &lt;appender: &lt;root&gt;: configuration - property属性 name:变量名 value:变量值 常用来设置一些配置文件中需要使用的常量值,如默认日志等级,最大保存天数,日志存储位置等. configuration - appender属性 name:变量名 class:具体的实现类的全限定类名 用来定义日志的输出源的配置 class的取值一般有两个:ch.qos.logback.core.ConsoleAppender和ch.qos.logback.core.rolling.RollingFileAppender 前者的功能是在输出到控制台,后者功能可以按时间分卷输出到文件 子标签 &lt;encoder&gt;:把日志转为字符串并将其输出到文件中 &lt;encoding&gt;:编码方式 &lt;filter&gt;:过滤器 &lt;file&gt;:日志文件输出储存位置 &lt;rollingPolicy&gt;:分卷模式 configuration - appender - encoder子标签 &lt;pattern&gt;:日志格式 configuration - appender - rollingPolicy属性 class:分卷模式的全限定类名 &lt;append&gt;:布尔值.日志被追加到文件结尾.如果是false,清空现存文件,默认是true 用来定义日志的分卷模式 class常用的类是ch.qos.logback.core.rolling.TimeBasedRollingPolicy 可以按照时间进行分卷 子标签 &lt;filenamePattern&gt;:分卷日志文件名格式 &lt;MaxHistory&gt;:日志最大保存天数 configuration - appender - filter属性 class:实现过滤规则的类的全限定类名 子标签 &lt;level&gt;:要进行过滤的级别 &lt;onMatch&gt;:等于level属性值时的操作.有NEUTRAL(有序列表里的下个过滤器过接着处理日志),ACCEPT和DENY可选 &lt;onMismatch&gt;:不等于时的操作,类上 用来定义输出源要过滤的日志等级 示例: &gt; &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt;&gt; &lt;level&gt;ERROR&lt;/level&gt;&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;&gt; &lt;/filter&gt;&gt; 以上配置表示只保留Error等级的日志信息 configuration - logger属性 name:指定为哪个包或类添加appender level:指定为哪个级别及以上记录日志,如果不指定,则默认继承&lt;root&gt;下的level additivity:是否向上级传递打印信息.默认值为true 子标签 &lt;appender-ref&gt;:为name表示的包或类指定appender.用属性ref来指定 用来定义包或类的日志打印级别及指定appender 示例: &gt; &lt;logger name="com.vnaso" additivity="false" level="INFO"&gt;&gt; &lt;!-- 设置日志输出 --&gt;&gt; &lt;appender-ref ref="vnasoRss"/&gt;&gt; &lt;appender-ref ref="console"/&gt;&gt; &lt;/logger&gt;&gt; 表示为com.vnaso这个包及下面所有类指定name为vnasoRss和console的appender来记录INFO及以上的日志,且不向上继承. Appender是绑定在logger上的,而logger又有继承关系,因此一个logger打印信息时的目的地Appender需要参考它的父亲和祖先.在logback中,默认情况下,如果一个logger打印一条信息,那么这条信息首先会打印至它自己的Appender,然后打印至它的父亲和父亲以上的祖先的Appender,但如果它的父亲设置了 additivity = false,那么这个logger除了打印至它自己的Appender外,只会打印至其父亲的Appender,因为它的父亲的additivity 属性置为了false,开始变得忘祖忘宗了,所以这个logger只认它父亲的Appender;此外,对于这个logger的父亲来说,如果父亲的logger打印一条信息,那么它只会打印至自己的Appender中(如果有的话),因为父亲已经忘记了爷爷及爷爷以上的那些父辈了. configuration - root属性 level(only):指定为哪个级别及以上记录日志 子标签 &lt;appender-ref&gt;:为name表示的包或类指定appender.用属性ref来指定 &lt;root&gt;标签是一种特殊的logger,但是它不能特别指定包或类.也就是说,它只能够接收继承了它且additivity值为true的logger传来的打印信息,具体查看继承关系 继承关系 继承关系是通过logger的name属性来实现的. 示例 &lt;root&gt;&gt;com.vnaso&gt;com.vnaso.controller&gt;com.vnaso.controller.UserController.java 以上对应继承关系:祖&gt;爷&gt;父&gt;子 level继承关系 appender继承关系]]></content>
      <categories>
        <category>Tool</category>
        <category>Logback</category>
      </categories>
      <tags>
        <tag>Logback</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven学习笔记]]></title>
    <url>%2F2019%2F02%2F04%2FJavaLearning%2FMaven%2F</url>
    <content type="text"><![CDATA[Maven使用Maven安装与配置下载与安装Maven官网下载地址 在如下位置点击下载最新版本Maven的压缩包 解压文件得到apache-maven-xxx文件夹.xxx为版本号 新建环境变量MAVEN_HOME,变量值为maven根目录地址 打开环境变量设置的步骤为: 右击此电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量 Win+R-&gt;sysdm.cpl-&gt;高级-&gt;环境变量 编辑环境变量path,添加%MAVEN_HOME%\bin\ 至此,maven安装完毕.打开命令提示符窗口(Win+R-&gt;cmd),输入mvn -v查询maven版本,检查maven是否成功安装.成功如图所示 配置创建maven仓库 如果不自行创建,maven将默认使用Default: ${user.home}/.m2/repository作为本地仓库 在想要作为maven仓库的地方创建文件夹maven-repository作为maven的本地仓库 打开maven安装根目录-&gt;conf-&gt;settings.xml 在&lt;settings&gt;标签下,找到&lt;localRepository&gt;标签.如果没有则自行添加. 修改值为本地仓库的地址,如&lt;localRepository&gt;C:\Maven\apache-maven-3.6.0\maven-repository&lt;/localRepository&gt; 修改下载镜像地址 将下载镜像更换为阿里云中央仓库,解决依赖从境外网站下载过慢的问题 打开maven安装根目录-&gt;conf-&gt;settings.xml 在&lt;settings&gt;标签下找到&lt;mirrors&gt;标签,添加如下代码 &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt; 保存即可 针对Maven添加依赖时没有自动提示的解决方案 到Maven仓库官网搜索,点击需要添加的依赖.复制&lt;dependency&gt;标签即可. Maven仓库官网 在IDEA中配置Maven 打开IDEA,settings-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven 修改Maven home directory为maven安装根目录 勾选User settings file后的Override,然后修改为安装根目录-&gt;conf-&gt;settings.xml 勾选Local repository后的Override,然后修改为本地的repository地址 Maven项目结构 项目根目录/ src/ main/ 项目主体根目录 java 源代码目录 resources 所需资源目录 filters 资源过滤文件目录 assembly 组件的描述配置(如何打包) config 配置文件 wepapp web应用的目录.WEB-INF,css,js等 test/ 项目测试目录根 java 单元测试java源代码文件 resources 测试需要用的资源库 filters c测试资源过滤库 site Site一些文档 target/ 存放项目构建后的文件和目录.jar,war,编译的class文件等 pom.xml MMaven的pom文件 LICENSE.TXT 项目的LISENCE README.TXT 项目的README Maven生命周期 Maven生命周期执行顺序从上至下 每执行当前指令之前,会把之前(上方)的指令都执行一次 每执行当前周期之前会执行之前的生命周期 clean生命周期 清理项目 clean 描述 pre-clean 执行清理前需要完成的工作execute processes needed prior to the actual project cleaning clean 清理上一次构建生成的文件remove all files generated by the previous build post-clean 执行清理后需要完成的工作execute processes needed to finalize the project cleaning default生命周期 构建项目 default 描述 validate 验证工程是否正确,所需要的资源是否可用validate the project is correct and all necessary information is available compile 编译项目的源代码compile the source code of the project test 使用已编译的测试代码,测试已编译的源代码test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed package 采用编译的代码,并以其可分配格式(如JAR)进行打包take the compiled code and package it in its distributable format, such as a JAR. verify 运行所有检查,验证包是否有效且达到质量标准run any checks on results of integration tests to ensure quality criteria are met install 把包安装在本地的repository中,可以被其他工程作为依赖来使用install the package into the local repository, for use as a dependency in other projects locally deploy 在整合或者发布环境下执行,将最终版本的包拷贝到远程的repository,使得其他的开发者或者工程可以共享done in the build environment, copies the final package to the remote repository for sharing with other developers and projects. site生命周期 建立和发布项目站点 site 描述 pre-site 生成项目站点之前需要完成的工作execute processes needed prior to the actual project site generation site 生成项目站点文档generate the project’s site documentation post-site 生成项目站点之后需要完成的工作execute processes needed to finalize the site generation, and to prepare for site deployment site-deploy 将项目站点发布到服务器deploy the generated site documentation to the specified web server Maven默认生命周期 Default Lifecycle 生命周期阶段 描述 validate 验证 确保当前配置和 POM 的内容是有效的。这包含对 pom.xml 文件树的验证。 initialize 初始化 在执行构建生命周期的主任务之前可以进行初始化。 generate-sources 生成源码 代码生成器可以开始生成在以后阶段中处理或编译的源代码。 process-sources 处理源码 提供解析、修改和转换源码。常规源码和生成的源码都可以在这里处理。 generate-resources 生成资源 可以生成非源码资源。通常包括元数据文件和配置文件。 process-resources 处理资源 处理非源码资源。修改、转换和重定位资源都能在这阶段发生。 compile 编译 编译源码。编译过的类被放到目标目录树中。 process-classes 处理类 处理类文件转换和增强步骤。字节码交织器和常用工具常在这一阶段操作。 generate-test-sources 生成测试源码 mojo 可以生成要操作的单元测试代码。 process-test-sources 处理测试源码 在编译前对测试源码执行任何必要的处理。在这一阶段，可以修改、转换或复制源代码。 generate-test-resources 生成测试资源 允许生成与测试相关的（非源码）资源。 process-test-resources 处理测试资源 可以处理、转换和重新定位与测试相关的资源。 test-compile 测试编译 编译单元测试的源码。 process-test-classes 对测试编译生成的文件做后期处理(需Maven2.0.5及以上) test 测试 运行编译过的单元测试并累计结果。 prepare-package 执行打包前的所有操作(需Maven2.1及以上) package 打包 将可执行的二进制文件打包到一个分布式归档文件中，如 JAR 或 WAR。 pre-integration-test 前集成测试 准备集成测试。这种情况下的集成测试是指在一个受到一定控制的模拟的真 实部署环境中测试代码。这一步能将归档文件部署到一个服务器上执行。 integration-test 集成测试 执行真正的集成测试。 post-integration-test 后集成测试 解除集成测试准备。这一步涉及测试环境重置或重新初始化。 verify 检验 检验可部署归档的有效性和完整性。过了这个阶段，将安装该归档。 install 安装 将该归档添加到本地 Maven 目录。这一步让其他可能依赖该归档的模块可以使用它。 deploy 部署 将该归档添加到远程 Maven 目录。这一步让这个工件能为更多的人所用。 Maven环境隔离配置 在pom.xml中的&lt;build&gt;节点下插入&lt;resources&gt;节点,在其中添加&lt;resource&gt;节点来声明要进行环境分离的resource目录.然后在pom.xml中&lt;project&gt;节点下(与&lt;build&gt;同级)增加&lt;profiles&gt;节点,通过添加&lt;profile&gt;节点来配置不同环境. 在&lt;build&gt;节点下插入&lt;resources&gt;节点 &lt;resources&gt; &lt;!-- 设置resources资源文件夹目录 --&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources.$&#123;deploy.type&#125;&lt;/directory&gt; &lt;!-- 排除指定文件 --&gt; &lt;excludes&gt; &lt;exclude&gt;*.jsp&lt;/exclude&gt; &lt;/excludes&gt; &lt;/resource&gt; &lt;!-- 设置resources资源文件夹目录 --&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;/resource&gt;&lt;/resources&gt; 在&lt;project&gt;节点下插入&lt;profiles&gt;节点,并配置各个环境的环境标识及其他属性 &lt;profiles&gt; &lt;!-- dev环境 --&gt; &lt;profile&gt; &lt;id&gt;dev&lt;/id&gt; &lt;!-- 设置默认使用该环境 --&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;!-- 设置环境标识 --&gt; &lt;properties&gt; &lt;deploy.type&gt;dev&lt;/deploy.type&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;!-- beta环境 --&gt; &lt;profile&gt; &lt;id&gt;beta&lt;/id&gt; &lt;!-- 设置环境标识 --&gt; &lt;properties&gt; &lt;deploy.type&gt;beta&lt;/deploy.type&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;!-- product环境 --&gt; &lt;profile&gt; &lt;id&gt;prod&lt;/id&gt; &lt;!-- 设置环境标识 --&gt; &lt;properties&gt; &lt;deploy.type&gt;prod&lt;/deploy.type&gt; &lt;/properties&gt; &lt;/profile&gt;&lt;/profiles&gt; 创建resources.&lt;环境标识&gt;目录,这样便可结合&lt;resource&gt;中定义的${deploy.type}和&lt;profile&gt;中定义的&lt;properties&gt;属性值来选择使用哪个环境 Maven命令使用 -Dmaven.test.skip=true:跳过测试 -P${deploy.type}:使用指定的环境.例如:mvn package -Pdev,使用dev环境 mvn help:effective-settings:查看生效的配置.这里的内容是settings.xml中生效的配置,可以用来查看repository地址和mirror的配置]]></content>
      <categories>
        <category>Tool</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
</search>
